#!/bin/sh
# Backup Ubuntu Device Script
#
# Goal: backup all user data and a list of apps
# todo: Restore script ;)
#
# Assumptions:
#  * Device has ssh enabled
#  * This machine has an ssh key which is on the device

if [ "$#" -ne 2 ]; then
  echo "Specify hostname or IP address of device, and password/passphrase"
  echo "e.g. 'buds 192.168.1.20 1234'"
  exit 1
fi

DATESTART=$(date +%Y%m%d-%H%M%S)
BACKUPDIR="$HOME/buds/backup/$DATESTART"
LOGFILE=$BACKUPDIR/backup.log
CLICKFILE="$BACKUPDIR/clicks.list"
DEVICEUSER="phablet"
HOST="$1"
PASSPHRASE="$2"
# Tar extra parameters
# gstreamer: causes video playback issues if restoring the backup
#            on different hardware
TAREXTRAPARAMS="--exclude=.cache/gstreamer-1.0/*"

# Create directory for backup and log
mkdir -p $BACKUPDIR
if [ "$?" -ne "0" ]; then
  echo "Failed to create $BACKUPDIR"
  exit 5
fi

log() {
  echo $(date +%Y%m%d-%H%M%S) : $* | tee -a $LOGFILE
}

# Check we have the tools we need to run the backup (rsync)

cmdtest() {
  # cmdtest reports wether the commands given
  # as parameters are available on the current system
  # and exits with exit code 1 if not
  # (can handle unlimited parameters, but exits on first fail)
  log "Checking necessary tools"
  for cmd in $*; do
    log "Looking for '$cmd' command"
    if ! type $cmd >/dev/null ; then
      log "This tool needs '$cmd' to run properly. Consider installing it."
      exit 1
    fi
    log "Found $cmd."
  done
}

cmdtest rsync

# TODO HERE
# check host is up
# check host is actually an ubuntu device
# Lots of checking for each of these steps to handle failures

# Get device code name
log "Get device code name"
DEVICENAME=$(ssh $DEVICEUSER@$HOST getprop ro.product.name)
if [ "$DEVICENAME" = "" ]; then
  log "Failed to get device code name"
  exit 1
fi
log "Got device code name: $DEVICENAME"

# Get device serial number
log "Get device serial number"
DEVICESERIAL=$(ssh $DEVICEUSER@$HOST getprop ro.serialno)
if [ "$DEVICESERIAL" = "" ]; then
  log "Failed to get device serial number"
  exit 2
fi
log "Got device serial number: $DEVICESERIAL"

# Set final backup file name
COMPRESSEDBACKUP=$BACKUPDIR/$DEVICENAME-$DEVICESERIAL.tgz

log "Determine disk space used on device"
DEVICESPACE=$(ssh $DEVICEUSER@$HOST "echo $PASSPHRASE | sudo -S --prompt='' du -bks /home/phablet/" | awk '{ print $1}')
log "Finished determining disk space used on device"

log "Determine free space on current machine"
DESKTOPSPACE=$(df -k $BACKUPDIR | tail -n 1 | awk '{ print $4 }' )
log "Finished determining free space on current machine"

# Check if we have enough disk space in $BACKUPDIR for the backup (roughly same size)
log "Approximate disk space used on device (K): $DEVICESPACE"
log "Approximate free space on backup disk (K): $DESKTOPSPACE"

# Rudimentary check for same space used on device on desktop
if [ "$DEVICESPACE" -gt "$DESKTOPSPACE" ]; then
  log "Insufficient free space on backup device: $DESKTOPSPACE smaller than $DEVICESPACE"
  exit 3
fi

# Get list of applications installed on device
log "Get list of installed apps from device"
ssh $DEVICEUSER@$HOST 'click list' > $CLICKFILE
log "Finished getting list of installed apps from device"

# Start backup
log "Copying files from device"
ssh $DEVICEUSER@$HOST "echo $PASSPHRASE | sudo -S --prompt='' tar -c -z $TAREXTRAPARAMS -f - ." > $COMPRESSEDBACKUP

if [ "$?" = "0" ]; then
  log "Finished copying files from device to $COMPRESSEDBACKUP"
else
  log "Copying files from device FAILED"
  exit 4
fi
